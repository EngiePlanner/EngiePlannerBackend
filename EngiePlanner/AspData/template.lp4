task(T) :- task_available_day(T,D).

days((7*W-6)..7*W) :- weeks(W).

#const hours_per_week = 40.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Feasible Solutions (weekly)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Generate assignments
%{assigned_empl(T,Emp) : task(T), employee(Emp)} .
% Each task must be assigned an employee.
%:- task(T), not assigned_empl(T,_).
% Each task cannot be assigned more than one employee.
%:- assigned_empl(T,Emp1), assigned_empl(T,Emp2), Emp1 != Emp2.
% An assigned employee must be capable of the job, they are assigned to.
%:- assigned_empl(J,E), not capable_of(E,J). 

assigned_empl(J,E) :- capable_of(E,J).

% Assign tasks to a week
{assign_week(Emp, W, T) : assigned_empl(T,Emp), weeks(W)}.
% Each task must be assigned a week.
:- task(T), not assign_week(_, _, T).
% Assign as early as possible
:~ assign_week(Emp, W, T). [W@1]

% Task cannot be assigned before delivery is available
:- assign_week(_, W, T), task_available(T , W_available), W < W_available.
% Task should be finished before delivery planned date
:~ assign_week(_, W, (_,D)), task_planned_week(D, Planned_week), Planned_week < W. [W-Planned_week@3]

% The summ of all task effort must not exceed the weekly capacity.
assign_week_task_dur(E, W, T, Dur) :- assign_week(E, W, T), task_duration(T,Dur).
load(E, W, S) :-S = #sum { Dur,E,W,T : assign_week_task_dur(E, W, T, Dur)}, weeks(W), employee(E).
:~ load(E, W, S), capacity(E, W, C), C<=S, Delta=S-C. [S-C@2]

% If there is a predecessor-successor relationship, then the successor must be in the same or a later week than the predecessor.
:- predecessor(T1, T2), assign_week(_, W1, T1), assign_week(_, W2, T2), W2<W1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Feasible Solutions (daily)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Assign days to the correct week.
day_belongs_to_week(Day, Week) :- days(Day), weeks(Week), Day\5=0, Day/5 = Week.
day_belongs_to_week(Day, Week) :- days(Day), weeks(Week), Day\5!=0, Day/5 + 1 = Week.
#const hours_per_day = 8.

% Alls tasks from a week must be assigned to a day in this week.
1 {assign_day(E, Day, T) : assign_week(E, Week, T), day_belongs_to_week(Day, Week)}.
% each task must be assigned to at least one day
:- task(T), not assign_day(_, _, T).
% the number of days assigned for a task must have more hours than the task duration
:- N_Days = #count {Day :assign_day(E, Day, T)}, task_duration(T,Dur), N_Days*8 < Dur.

% All days assigned to the same task must be consecutive
1 { start_day(E, Day, T):assign_day(E, Day, T)} 1 :- task(T).
1 { end_day(E, Day, T):assign_day(E, Day, T)} 1 :- task(T).
:- start_day(E, Day1, T), end_day(E, Day2, T), Day1>=Day2.
:- start_day(E, Day1, T), assign_day(E, Day2, T), Day2<Day1.
:- end_day(E, Day1, T), assign_day(E, Day2, T), Day2>Day1.
:- assign_day(E, Day, T), assign_day(E, Day2, T), Day2 > Day, not assign_day(E, Day+1, T).

% If there is a predecessor-successor relationship, then the successor must be in the same or a later week than the predecessor.
:- predecessor(T1, T2), assign_day(_, Day1, T1), assign_day(_, Day2, T2), Day2<Day1.


% Start day must be greater or equal the available day.
:- task_available_day(T,Day_available), start_day(_, Day_start, T), Day_start < Day_available.

% End day should be lower or equal than the planned day.
:~ task_planned_day(T,Day_planned), end_day(_, Day_end, T), Day_end > Day_planned. [Day_end-Day_planned@3]

% If a task fills exactly n days, then no other task can be assigned to these days.
:- Days = #sum { Day,E,T : assign_day(E, Day, T)}, task_duration(T,Dur), Dur=8*Days, assign_day(E, Day, Other_T).

% If two tasks assigned to the same person are on the same day, then they must be start and end.
start_day(E, Day, T1)|start_day(E, Day, T2) :- assign_day(E, Day, T1), assign_day(E, Day, T2), T1!=T2.
end_day(E, Day, T1)|end_day(E, Day, T2) :- assign_day(E, Day, T1), assign_day(E, Day, T2), T1!=T2.

% A task cannot be assigned to a day on the weekend.
:- assign_day(_, Day, _) ,weekend(Day).

% Assign as early as possible
:~ assign_day(E, Day, T). [Day@4]

:- task(T), not start_day(_, _, T).
:- task(T), not end_day(_, _, T).


%#show day_belongs_to_week/2.
%#show assign_day/3.
%#show task_duration/2.
#show start_day/3.
#show end_day/3.





