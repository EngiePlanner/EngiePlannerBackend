%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Problem Instance 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
task((11, 2)). task_available_day((11, 2),1). task_available(2,1). task_planned_day((11, 2),4). planned_date_week(2, 1). task_duration((11, 2),20). job_duration(11,20). delivery(2). 
task((12, 1)). task_available_day((12, 1),11). task_available(1,3). task_planned_day((12, 1),19). planned_date_week(1, 4). task_duration((12, 1),10). job_duration(12,10). delivery(1). 
task((13, 1)). task_available_day((13, 1),9). task_available(1,2). task_planned_day((13, 1),13). planned_date_week(1, 3). task_duration((13, 1),15). job_duration(13,15). 

capacity(rba5clj, 1, 20). 
capacity(rba5clj, 2, 20). 
capacity(rba5clj, 3, 20). 
capacity(rba5clj, 4, 20). 
capacity(rba5clj, 5, 20). 
capacity(rba5clj, 6, 20). 
capacity(rba5clj, 7, 20). 
capacity(rba5clj, 8, 20). 
capacity(rba5clj, 9, 20). 
capacity(rba5clj, 10, 20). 
capacity(rba5clj, 11, 20). 
capacity(rba5clj, 12, 20). 
capacity(rba5clj, 13, 20). 
capacity(rba5clj, 14, 20). 
capacity(rba5clj, 15, 20). 
capacity(rba5clj, 16, 20). 
capacity(rba5clj, 17, 20). 
capacity(rba5clj, 18, 20). 
capacity(rba5clj, 19, 20). 
capacity(rba5clj, 20, 20). 
capacity(rba5clj, 21, 20). 
capacity(rba5clj, 22, 20). 
capacity(rba5clj, 23, 20). 
capacity(rba5clj, 24, 20). 
capacity(rba5clj, 25, 20). 
capacity(rba5clj, 26, 20). 
capacity(rba5clj, 27, 20). 
capacity(rba5clj, 28, 20). 
capacity(rba5clj, 29, 20). 
capacity(rba5clj, 30, 20). 
capacity(rba5clj, 31, 20). 
capacity(rba5clj, 32, 20). 
capacity(rba5clj, 33, 20). 
capacity(rba5clj, 34, 20). 
capacity(rba5clj, 35, 20). 
capacity(rba5clj, 36, 20). 
capacity(rba5clj, 37, 20). 
capacity(rba5clj, 38, 20). 
capacity(rba5clj, 39, 20). 
capacity(rba5clj, 40, 20). 
capacity(rba5clj, 41, 20). 
capacity(rba5clj, 42, 20). 
capacity(rba5clj, 43, 20). 
capacity(rba5clj, 44, 20). 
capacity(rba5clj, 45, 20). 
capacity(rba5clj, 46, 20). 
capacity(rba5clj, 47, 20). 
capacity(rba5clj, 48, 20). 
capacity(rba5clj, 49, 20). 
capacity(rba5clj, 50, 20). 
capacity(rba5clj, 51, 20). 
capacity(rba5clj, 52, 20). 
capacity(roc2clj, 1, 20). 
capacity(roc2clj, 2, 20). 
capacity(roc2clj, 3, 20). 
capacity(roc2clj, 4, 20). 
capacity(roc2clj, 5, 20). 
capacity(roc2clj, 6, 20). 
capacity(roc2clj, 7, 20). 
capacity(roc2clj, 8, 20). 
capacity(roc2clj, 9, 20). 
capacity(roc2clj, 10, 20). 
capacity(roc2clj, 11, 20). 
capacity(roc2clj, 12, 10). 
capacity(roc2clj, 13, 35). 
capacity(roc2clj, 14, 20). 
capacity(roc2clj, 15, 20). 
capacity(roc2clj, 16, 20). 
capacity(roc2clj, 17, 20). 
capacity(roc2clj, 18, 20). 
capacity(roc2clj, 19, 20). 
capacity(roc2clj, 20, 20). 
capacity(roc2clj, 21, 20). 
capacity(roc2clj, 22, 20). 
capacity(roc2clj, 23, 20). 
capacity(roc2clj, 24, 20). 
capacity(roc2clj, 25, 20). 
capacity(roc2clj, 26, 20). 
capacity(roc2clj, 27, 20). 
capacity(roc2clj, 28, 20). 
capacity(roc2clj, 29, 20). 
capacity(roc2clj, 30, 20). 
capacity(roc2clj, 31, 20). 
capacity(roc2clj, 32, 20). 
capacity(roc2clj, 33, 20). 
capacity(roc2clj, 34, 20). 
capacity(roc2clj, 35, 20). 
capacity(roc2clj, 36, 20). 
capacity(roc2clj, 37, 20). 
capacity(roc2clj, 38, 20). 
capacity(roc2clj, 39, 20). 
capacity(roc2clj, 40, 20). 
capacity(roc2clj, 41, 20). 
capacity(roc2clj, 42, 20). 
capacity(roc2clj, 43, 20). 
capacity(roc2clj, 44, 20). 
capacity(roc2clj, 45, 20). 
capacity(roc2clj, 46, 20). 
capacity(roc2clj, 47, 20). 
capacity(roc2clj, 48, 20). 
capacity(roc2clj, 49, 20). 
capacity(roc2clj, 50, 20). 
capacity(roc2clj, 51, 20). 
capacity(roc2clj, 52, 20). 

capable_of(E,11) :- sub_team_member(E,team1).
capable_of(rba5clj,11).
capable_of(E,12) :- sub_team_member(E,team1).
capable_of(roc2clj,12).
capable_of(E,13) :- sub_team_member(E,team1).
capable_of(roc2clj,13).

days(1..25).
weeks(1..5).
job(11).
job(12).
job(13).
weekend(1).
weekend(7).
weekend(8).
weekend(14).
weekend(15).
weekend(21).
weekend(22).


sub_team(team1).
sub_team(team2).
sub_team(team3).

employee(roc2clj). sub_team_member(roc2clj, team1).
employee(big83wi). sub_team_member(big83wi, team2).
employee(tev8fe). sub_team_member(tev8fe, team1). sub_team_member(tev8fe, team2).
employee(hvb1kor). sub_team_member(hvb1kor, team3). sub_team_member(hvb1kor, team2).

capable_of(E,job1) :- sub_team_member(E,team1).
capable_of(E,job2) :- sub_team_member(E,team1).
capable_of(E,job3) :- sub_team_member(E,team2).
capable_of(E,job4) :- sub_team_member(E,team3).
capable_of(E,job5) :- sub_team_member(E,team4).

before((job1,D), (job2,D)) :- delivery(D).
before((job2,D), (job3,D)) :- delivery(D).
before((job1,D), (job4,D)) :- delivery(D).

days((7*W-6)..7*W) :- weeks(W).

#const hours_per_week = 40.

capacity(E, W, P*hours_per_week/100) :- capacity_employee(E, W, P), employee(E).
capacity(E, W, hours_per_week) :- employee(E), weeks(W), not capacity_employee(E, W, _). 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Feasible Solutions (weekly)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Generate assignments
{assigned_empl(T,Emp) : task(T), employee(Emp)} .
% Each task must be assigned an employee.
:- task(T), not assigned_empl(T,_).
% Each task cannot be assigned more than one employee.
:- assigned_empl(T,Emp1), assigned_empl(T,Emp2), Emp1 != Emp2.
% An assigned employee must be capable of the job, they are assigned to.
:- assigned_empl((J,_),E), not capable_of(E,J). 

% Assign tasks to a week
{assign_week(Emp, W, T) : assigned_empl(T,Emp), weeks(W)}.
% Each task must be assigned a week.
:- task(T), not assign_week(_, _, T).
% Assign as early as possible
:~ assign_week(Emp, W, T). [W@1]

% Task cannot be assigned before delivery is available
:- assign_week(_, W, T), task_available(T , W_available), W < W_available.
% Task should be finished before delivery planned date
 :~ assign_week(_, W, (_,D)), planned_date_week(D, Planned_week), Planned_week < W. [W-Planned_week@3]

% The summ of all task effort must not exceed the weekly capacity.
assign_week_task_dur(E, W, T, Dur) :- assign_week(E, W, T), task_duration(T,Dur).
load(E, W, S) :-S = #sum { Dur,E,W,T : assign_week_task_dur(E, W, T, Dur)}, weeks(W), employee(E).
:~ load(E, W, S), capacity(E, W, C), C<=S, Delta=S-C. [S-C@2]

% If there is a predecessor-successor relationship, then the successor must be in the same or a later week than the predecessor.
:- before(T1, T2), assign_week(_, W1, T1), assign_week(_, W2, T2), W2<W1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Feasible Solutions (daily)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Assign days to the correct week.
day_belongs_to_week(Day, Week) :- days(Day), weeks(Week), Day\5=0, Day/5 = Week.
day_belongs_to_week(Day, Week) :- days(Day), weeks(Week), Day\5!=0, Day/5 + 1 = Week.
#const hours_per_day = 8.

% Alls tasks from a week must be assigned to a day in this week.
1 {assign_day(E, Day, T) : assign_week(E, Week, T), day_belongs_to_week(Day, Week)}.
% each task must be assigned to at least one day
:- task(T), not assign_day(_, _, T).
% the number of days assigned for a task must have more hours than the task duration
:- N_Days = #count {Day :assign_day(E, Day, T)}, task_duration(T,Dur), N_Days*8 < Dur.

% All days assigned to the same task must be consecutive
1 { start_day(E, Day, T):assign_day(E, Day, T)} 1 :- task(T).
1 { end_day(E, Day, T):assign_day(E, Day, T)} 1 :- task(T).
:- start_day(E, Day1, T), end_day(E, Day2, T), Day1>=Day2.
:- start_day(E, Day1, T), assign_day(E, Day2, T), Day2<Day1.
:- end_day(E, Day1, T), assign_day(E, Day2, T), Day2>Day1.
:- assign_day(E, Day, T), assign_day(E, Day2, T), Day2 > Day, not assign_day(E, Day+1, T).

% If there is a predecessor-successor relationship, then the successor must be in the same or a later week than the predecessor.
:- before(T1, T2), assign_day(_, Day1, T1), assign_day(_, Day2, T2), Day2<Day1.


% Start day must be greater or equal the available day.
:- task_available_day(T,Day_available), start_day(_, Day_start, T), Day_start < Day_available.

% End day should be lower or equal than the planned day.
:~ task_planned_day(T,Day_planned), end_day(_, Day_end, T), Day_end > Day_planned. [Day_end-Day_planned@3]

% If a task fills exactly n days, then no other task can be assigned to these days.
:- Days = #sum { Day,E,T : assign_day(E, Day, T)}, task_duration(T,Dur), Dur=8*Days, assign_day(E, Day, Other_T).

% If two tasks assigned to the same person are on the same day, then they must be start and end.
start_day(E, Day, T1)|start_day(E, Day, T2) :- assign_day(E, Day, T1), assign_day(E, Day, T2), T1!=T2.
end_day(E, Day, T1)|end_day(E, Day, T2) :- assign_day(E, Day, T1), assign_day(E, Day, T2), T1!=T2.

% A task cannot be assigned to a day on the weekend.
:- assign_day(_, Day, _) ,weekend(Day).

% Assign as early as possible
:~ assign_day(E, Day, T). [Day@4]

%#show day_belongs_to_week/2.
%#show assign_day/3.
%#show task_duration/2.
%#show start_day/3.
%#show end_day/3.





